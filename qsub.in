#!@GUILE@ --no-auto-compile
-*- scheme -*-
!#
;;; Copyright Â© 2020  Roel Janssen <roel@gnu.org>

;;; This program is free software: you can redistribute it and/or
;;; modify it under the terms of the GNU General Public License as
;;; published by the Free Software Foundation, either version 3 of
;;; the License, or (at your option) any later version.

(use-modules (ice-9 format)
             (ice-9 popen)
             (ice-9 rdelim)
             (ice-9 textual-ports)
             (srfi srfi-1))

(define (flatten lst)
  (cond [(null? lst)
         '()]
        [(pair? lst)
         (append (flatten (car lst)) (flatten (cdr lst)))]
        [else (list lst)]))

;;
;; Program options
;; ----------------------------------------------------------------------------

(define* (parse-options options #:optional (config '()))
  (if (null? options)
      config
      (let ((option   (car options))
            (argument (if (> (length options) 1)
                          (cadr options)
                          "")))
        (cond
         ((string= "-l" option)
          (if (string-contains argument ",")
              (let ((rt-specs (string-split argument #\,)))
                (parse-options
                 (flatten
                  (append (map (lambda (arg) (list "-l" arg)) rt-specs)
                          (cddr options)))
                 config))
              (cond
               ;; Runtime property
               ;; -------------------------------------------------------------
               ((string-prefix? "h_rt=" argument)
                (parse-options (cddr options)
                               (cons `(time . ,(substring argument 5))
                                     config)))
               ;; Memory property
               ;; -------------------------------------------------------------
               ((string-prefix? "h_vmem=" argument)
                (parse-options (cddr options)
                               (cons `(memory . ,(substring argument 7))
                                     config))))))

         ;; Threads
         ;; -------------------------------------------------------------------
         ((and (string= "-pe" option)
               (string= "threaded" argument)
               (> (length options) 2))
          (parse-options (cdddr options)
                         (cons `(threads . ,(caddr options))
                               config)))

         ;; Preserve environment option.
         ;; -------------------------------------------------------------------
         ((string= "-V" option)
          (parse-options (cdr options)
                         (cons `(preserve-environment . #t) config)))

         ((string= "-cwd" option)
          (parse-options (cdr options)
                         (cons `(preserve-cwd . #t) config)))

         ;; Job name.
         ;; -------------------------------------------------------------------
         ((string= "-N" option)
          (parse-options (cddr options)
                         (cons `(name . ,argument) config)))

         ;; E-mail options
         ;; -------------------------------------------------------------------
         ((string= "-m" option)
          (parse-options (cddr options)
                         (cons `(mail-events . ,argument) config)))

         ((string= "-M" option)
          (parse-options (cddr options)
                         (cons `(mail-address . ,argument) config)))

         ;; Logging options
         ;; -------------------------------------------------------------------
         ((string= "-e" option)
          (parse-options (cddr options)
                         (cons `(error-stream . ,argument) config)))

         ((string= "-o" option)
          (parse-options (cddr options)
                         (cons `(output-stream . ,argument) config)))

         ;; Administrative options
         ;; -------------------------------------------------------------------
         ((string= "-P" option)
          (format #t "Ignoring option ~s.~%" "-P")
          (parse-options (cddr options)
                         (cons `(project . ,argument) config)))

         ((string= "-q" option)
          (format #t "Ignoring option '~s.~%" "-q")
          (parse-options (cddr options)
                         (cons `(queue . ,argument) config)))

         ((string= "-R" option)
          (format #t "Ignoring option ~s.~%" "-R")
          (parse-options (cddr options)
                         (cons `(reservation . ,argument) config)))

         ;; Additional options
         ((string= "-@" option)
          (let* ((additional-options (call-with-input-file argument read-line))
                 (split-opts (string-split additional-options #\space)))
            (parse-options (append split-opts (cddr options))
                           (cons `(configfile . ,argument) config))))

         ;; Job dependencies
         ;; -------------------------------------------------------------------
         ((string= "-hold_jid" option)
          (let ((jids (string-split argument #\,)))
            (parse-options (cddr options)
              (append (map (lambda (jid)
                             `(dependency . ,jid))
                           jids)
                      config))))

         ;; Unhandled options
         ;; -------------------------------------------------------------------
         ((string-prefix? "-" option)
          (format (current-error-port)
                  "Ignoring unhandled option ~s and skipping one argument.~%"
                  option)
          (parse-options (cddr options) config))

         (else
          (parse-options (cdr options)
                         (cons `(script . ,option) config)))))))

(define %config (parse-options (cdr (command-line))))
(define %username (getlogin))

(unless (string? %username)
  (set! %username (getenv "LOGNAME"))
  (unless (string? %username)
    (format #t "Could not obtain your username.~%")
    (exit 0)))

;;
;; Fixing some non-trivial incompatibility.
;; ----------------------------------------------------------------------------
;;
;; Specifying directories instead of files to log to is handled by SGE by
;; making up a filename.  SLURM does not do such a thing, but seems to ignore
;; the logging.  Here we attempt mitigate that incompatibility by making up
;; a filename.

(when (and (assoc-ref %config 'error-stream)
           (assoc-ref %config 'script))
  (let ((file (stat (assoc-ref %config 'error-stream) #f)))
    (when (and file (eq? (stat:type file) 'directory))
      (assoc-set! %config 'error-stream
                  (string-append
                   (assoc-ref %config 'error-stream)
                   "/" (basename (assoc-ref %config 'script)) ".err")))))

(when (and (assoc-ref %config 'output-stream)
           (assoc-ref %config 'script))
  (let ((file (stat (assoc-ref %config 'output-stream) #f)))
    (when (and file (eq? (stat:type file) 'directory))
      (assoc-set! %config 'output-stream
                  (string-append
                   (assoc-ref %config 'output-stream)
                   "/" (basename (assoc-ref %config 'script)) ".out")))))


;;
;; Wrap command from stdin
;; ----------------------------------------------------------------------------
(define (read-job-script-from-stdin)
  "Creates a job script from the data passed to stdin."
  (let* ((job-port     (mkstemp! "/tmp/qsub-slurm-XXXXXX"))
         (job-filename (port-filename job-port)))
    (format job-port "#!/bin/sh~%~a~%" (get-string-all (current-input-port)))
    (close-port job-port)
    job-filename))

(unless (assoc-ref %config 'script)
  (set! %config (cons `(stdin-script . ,(read-job-script-from-stdin)) %config)))

;;
;; Jobs and job names translation
;; ----------------------------------------------------------------------------

(define (jobs-and-their-names)

  (define* (read-job-entries port #:optional (out '()))
    (let ((line (read-line port)))
      (if (eof-object? line)
          out
          (let ((fields (string-split line #\space)))
            (read-job-entries port
                              (cons `(,(cadr fields) . ,(car fields))
                                    out))))))

  (let* ((port (open-input-pipe
                (string-append
                 "@SQUEUE@"
                 " -u " %username
                 " -t PENDING,RUNNING"
                 " --format='%i %j'"
                 " -h")))
         (entries (read-job-entries port)))
    (close-pipe port)
    entries))


;;
;; Command-line options processing
;; ----------------------------------------------------------------------------

(define (construct-slurm-command options)
  (call-with-values (lambda _
                      (partition (lambda (item)
                                   (eq? (car item) 'dependency))
                                 options))
    (lambda (dependencies other)
      (let ((jobs (jobs-and-their-names)))
        (call-with-output-string
          (lambda (port)
            (format port "@SBATCH@ ")

            (unless (assoc-ref other 'preserve-cwd)
              (format port "--chdir=$HOME "))

            (when (assoc-ref other 'time)
              (format port "--time ~a " (assoc-ref other 'time)))

            (when (assoc-ref other 'memory)
              (format port "--mem ~a " (assoc-ref other 'memory)))

            (when (assoc-ref other 'name)
              (format port "--job-name ~s " (assoc-ref other 'name)))

            ;; TOOD: Translate the e-mail options.
            ;(when (assoc-ref other 'mail-events)
            ;  (format port " --mail-type=~a" (assoc-ref other 'mail-events)))

            ;(when (assoc-ref other 'mail-address)
            ;  (format port " --mail-user=~a" (assoc-ref other 'mail-address)))

            (format port "--export=~a "
                    (if (assoc-ref other 'preserve-environment)
                        "ALL" "NONE"))

            ;; Output streams / log files
            (when (assoc-ref other 'output-stream)
              (format port "--output ~s " (assoc-ref other 'output-stream)))

            (when (assoc-ref other 'error-stream)
              (format port "--error ~s " (assoc-ref other 'error-stream)))

            ;; We divide the number of threads by two, because
            ;; every CPU in the cluster can have two threads.
            (when (assoc-ref other 'threads)
              (format port "--cpus-per-task ~a "
                      (ceiling
                       (/ (string->number (assoc-ref other 'threads))
                          2))))

            (unless (or (null? dependencies)
                        (null? jobs))
              (format port "--dependency=afterok~{:~a~} "
                      (map (lambda (dependency) (assoc-ref jobs dependency))
                           (map cdr dependencies))))

            (if (assoc-ref other 'script)
                (format port "~a" (assoc-ref other 'script))
                (format port "~a" (assoc-ref other 'stdin-script)))))))))

;;
;; Slurmification
;; ----------------------------------------------------------------------------

(let ((command (construct-slurm-command %config)))
  (format #t "Running:  ~s~%" command)
  (for-each (lambda (entry) (setenv (car entry) (cdr entry)))
            `(("SGE_STDERR_PATH" . ,(assoc-ref %config 'error-stream))
              ("SGE_STDOUT_PATH" . ,(assoc-ref %config 'output-stream))))
  (system command)

  (when (assoc-ref %config 'stdin-script)
    (delete-file (assoc-ref %config 'stdin-script))))
